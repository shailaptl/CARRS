// Michael G. Merritt

#include <iostream>
#include <vector>
#include <string>
#include <fstream>
#include <sstream>
#include <fcntl.h>
#include <unistd.h>

using namespace std;

// vector to store data from USB port
vector<string> vPortData;

// prints the vector (that holds the data) to a file
void printToLog(vector<string>& v) {
	// creates file
	ofstream file;
	string fileName = "T1_log.txt";
	// opens file
	file.open(fileName);
	// writes vector to file
	int size = v.size();
	for (int i = 0; i < size; ++i) {
		file << v[i] << endl;
	}
	// closes file
	file.close();
}

// returns the name of a log file based on the light number
string logNameFunction(int numberOfLight) {
	string fileName = "T" + to_string(numberOfLight) + "_log.txt";
	return (fileName);
}

// replaces blank spaces in a string with underscores
string space2underscore(string text) {
	for(string::iterator it = text.begin(); it != text.end(); ++it) {
		if(*it == ' ' || *it == '_') {
			*it = '_';
		}
	}
	return text;
}

// removes double spaces from a given string
string removeDoublespace(string &str) {
	size_t pos;
	while((pos = str.find("  ")) != string::npos )
		str = str.replace(pos, 2, " " );
	return str;
}

// returns the time and date as a string
string time() {
	time_t result = time(nullptr);
	string timeAndDate = asctime(localtime(&result));
	timeAndDate = removeDoublespace(timeAndDate);
	timeAndDate = space2underscore(timeAndDate);
	return timeAndDate;
}

// opens the USB serial port and writes data from the port to a vector
int open_port(void) {	
	// variables to hold values
	int fd;
	int res;
	char buf[255];

	// opens the port, '/dev/cu.usbmodemfd131' is the port the Arduino is connected to
	fd = open("/dev/cu.usbmodemFA131", O_RDWR | O_NOCTTY | O_NDELAY);
	
	// checks to see that the port is able to be opened, shows error message if not
	if (fd == -1) {
		perror("Unable to open port.");
	}
	else {
		fcntl(fd, F_SETFL, 0);
	}

	// reads in data from port
	res = read(fd,&buf[0],255);
	// takes the data from the buffer, converts it to a string
	string str(buf);
	// timestamp string
	string tmeStmp = space2underscore(time());
	// string to hold timestamp with identifier
	string nStr = str + "_" + tmeStmp;
	// outputs timestamps with identifiers to screen
	cout << nStr;
	// pushes the buffer data string back into a vector of strings
	vPortData.push_back(nStr);
	// prints the vector of strings to a file
	printToLog(vPortData);

	return (0);
}

int main(int argc, char *argv[]) {
	// collect data
	while (1) {
		open_port();
	}
}
